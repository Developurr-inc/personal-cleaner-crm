using Developurr.Orderly.Domain.Exceptions;
using Developurr.Orderly.Domain.UnitTests.TestUtils.OptionalText;

namespace Developurr.Orderly.Domain.UnitTests.Shared.ValueObjects;

public sealed class OptionalTextTest
{
    [Fact]
    public void GivenValidInput_WhenCreatingOptionalText_ThenShouldInstantiateOptionalText()
    {
        // Arrange
        var value = OptionalTextFixture.CreateOptionalText();
    
        // Act
        var optionalText = Domain.Shared.ValueObjects.OptionalText.Create(
            value.Value
            );

        // Assert
        Assert.NotNull(optionalText);
    }
    
    [Fact]
    public void GivenValidText_WhenCreatingOptionalText_ThenShouldHaveValidText()
    {
        // Arrange
        var expectedText = OptionalTextFixture.CreateOptionalText();
        
        // Act
        var text = Developurr.Orderly.Domain.Shared.ValueObjects.OptionalText.Create(
            expectedText.Value
        );

        // Assert
        Assert.Equal(expectedText.Value, text.Value);
    }
    
    [Fact]
    public void GivenEmptyText_WhenCreatingOptionalText_ThenShouldHaveValidText()
    {
        // Arrange
        var expectedText = "";
        
        // Act
        var text = Developurr.Orderly.Domain.Shared.ValueObjects.OptionalText.Create(
            expectedText
        );

        // Assert
        Assert.Equal(expectedText, text.Value);
    }
    
    [Fact]
    public void GivenWhitespaceText_WhenCreatingOptionalText_ThenShouldHaveEmptyText()
    {
        // Arrange
        const string whitespaceText = "        ";
        const string expectedText = "";

        // Act
        var optionalText = Domain.Shared.ValueObjects.OptionalText.Create(
            whitespaceText
        );

        // Assert
        Assert.Equal(expectedText, optionalText.Value);
    }

    [Fact]
    public void GivenLongText_WhenCreatingOptionalText_ThenShouldThrowEntityValidationExceptionWithMessage()
    {
        // Assert
        const string longText = 
            "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";
        const string expectedErrorMessage = "Value cannot be longer than 10000 characters.";

        // Act
        var exception = Record.Exception(
            () =>
                Developurr.Orderly.Domain.Shared.ValueObjects.OptionalText.Create(
                    longText
                )
        );
        // Assert
        var eve = Assert.IsType<ArgumentException>(exception);
        Assert.Contains(expectedErrorMessage, eve.Message);
    }
}
